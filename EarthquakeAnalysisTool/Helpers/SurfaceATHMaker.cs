using System.Collections.Generic;
using System.IO;
using EqAT.Helpers;


namespace EqAT
{

    public struct SurfaceATHMakerOptions
    {
        /// <summary>
        /// Skip zero accelerations read in Shake91
        /// </summary>
        public bool IgnoreZeroAcc { get; set; }
        public string InputFilePath { get; set; }
    }

    public class ATH
    {
        public string Title { get; set; }
        public List<string> Readings { get; set; }
    }

    /// <summary>
    /// ATH generated by Shake91 is processed using this class to generate a XYScatter chart in Excel
    /// </summary>
    public class SurfaceATHMaker : FileProcessor
    {
        private string mPath;
        /// <summary>
        /// Acceleration Time Histories
        /// </summary>
        
        public List<ATH> ATHMgr { get; private set; }

        public List<double> ATHdouble { get; private set; }
        /// <summary>
        /// Time Interval in Milliseconds
        /// </summary>
        // public int DT { get; set; }
        /// <summary>
        /// Maximum Values that the ATH should hold
        /// </summary>
        public int MaxValues { get; set; }
        private SurfaceATHMakerOptions Options { get; set; }

        public SurfaceATHMaker(SurfaceATHMakerOptions options)
        {
            ATHMgr = new List<ATH>();
            ATHdouble = new List<double>();
            // this.DT = 20;
            this.Options = options;
            this.MaxValues = 8 * 128;
            this.mPath = options.InputFilePath;
        }

        /// <summary>
        /// Creates a column from an ATH file generated by Shake91
        /// </summary>
        public List<ATH> ReadATH()
        {
           
            using (StreamReader sr = new StreamReader(mPath))
            {

                string line = sr.ReadLine();
                if (!sr.EndOfStream)
                {
                    bool firstATH = ATHMgr.Count == 0 && line.Contains("XMAX=");

                    while (!sr.EndOfStream)
                    {
                        ATH ath = new ATH();
                        line = sr.ReadLine().Trim();
                        foreach (char c in Path.GetInvalidFileNameChars())
                        {
                            line = line.Replace(c.ToString(), "");
     
                        }
                        RemoveDoubleSpaces(ref line);
                        line = line.Replace("ACCELERATION VALUES AT", "");
                        if (line.Length > 31)
                        {
                            line = line.Substring(0, 31);
                        }
                        ath.Title = line.Trim();
                        ath.Readings = new List<string>();
                        while (!sr.EndOfStream && !line.Contains("XMAX=") && ath.Readings.Count < this.MaxValues)
                        {
                            AddAccelelations(ath, line);
                            line = sr.ReadLine();
                        }
                        if (ath.Readings.Count > 0)
                        {
                            ATHMgr.Add(ath);
                            firstATH = false;
                        }
                    }
                }

  
            }

            return ATHMgr;
        }


        private void AddAccelelations(ATH ath, string line)
        {
            List<string> nums = SplitLine(line);
            for (int i = 0; i < nums.Count; i++)
            {
                ath.Readings.Add(nums[i]);
                double d = 0.0;
                double.TryParse(nums[i], out d);
                this.ATHdouble.Add(d);
            }
        }

        private List<string> SplitLine(string line)
        {
            char[] chars = line.ToCharArray();
            List<string> acc = new List<string>();

            if (chars.Length > 72)
            {
                for (int i = 0; i < chars.Length; i++)
                {
                    if (i + 9 > chars.Length)
                        return acc;

                    string num = line.Substring(i, 9);
                    if (this.Options.IgnoreZeroAcc)
                    {
                        double a = 0.0;
                        double.TryParse(num, out a);
                        if (a != 0)
                        {
                            acc.Add(num);
                        }
                    }
                    else
                    {
                        acc.Add(num);
                    }
                    i = i + 8;
                    if (acc.Count == 8)
                    {
                        return acc;
                    }
                }
            }

            return acc;
        }

        private bool IsValidLine(string line)
        {
            bool valid;
            valid = SplitLine(line).Count == 8;
            return valid;
        }


    }
}
