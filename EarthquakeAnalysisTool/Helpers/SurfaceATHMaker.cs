using System.Collections.Generic;
using System.IO;
using EqAT.Helpers;


namespace EqAT
{

    public struct SurfaceATHMakerOptions
    {
        /// <summary>
        /// Skip zero accelerations read in Shake91
        /// </summary>
        public bool IgnoreZeroAcc { get; set; }
        public string InputFilePath { get; set; }
    }

    /// <summary>
    /// ATH generated by Shake91 is processed using this class to generate a XYScatter chart in Excel
    /// </summary>
    public class SurfaceATHMaker : FileProcessor
    {
        private string mPath;
        /// <summary>
        /// Acceleration Time Histories
        /// </summary>
        public List<string> ATH { get; private set; }
        /// <summary>
        /// Time Interval in Milliseconds
        /// </summary>
        // public int DT { get; set; }
        /// <summary>
        /// Maximum Values that the ATH should hold
        /// </summary>
        public int MaxValues { get; set; }
        private SurfaceATHMakerOptions Options { get; set; }

        public SurfaceATHMaker(SurfaceATHMakerOptions options)
        {
            ATH = new List<string>();
            // this.DT = 20;
            this.Options = options;
            this.MaxValues = 8 * 128;
            this.mPath = options.InputFilePath;
        }

        /// <summary>
        /// Creates a column from an ATH file generated by Shake91
        /// </summary>
        public List<string> ReadATH()
        {
            ATH.Clear();

            using (StreamReader sr = new StreamReader(mPath))
            {
                string line = sr.ReadLine();
                this.Title = sr.ReadLine(); // Title
                line = sr.ReadLine();

                while (!sr.EndOfStream && ATH.Count < this.MaxValues)
                {
                    AddAccelelations(line);
                    line = sr.ReadLine();
                }
            }

            return ATH;
        }

        public void WriteATH()
        {
            string dest = Path.Combine(Path.GetDirectoryName(mPath), Path.GetFileNameWithoutExtension(mPath) + "-for-excel.txt");
            StreamWriter sw = new StreamWriter(dest);
            foreach (string s in ATH)
            {
                sw.WriteLine(s);
            }
            sw.Close();
        }

        private void AddAccelelations(string line)
        {
            List<string> nums = SplitLine(line);
            for (int i = 0; i < nums.Count; i++)
            {
                ATH.Add(nums[i]);
            }
        }

        private List<string> SplitLine(string line)
        {
            char[] chars = line.ToCharArray();
            List<string> acc = new List<string>();

            if (chars.Length > 72)
            {
                for (int i = 0; i < chars.Length; i++)
                {
                    if (i + 9 > chars.Length)
                        return acc;

                    string num = line.Substring(i, 9);
                    if (this.Options.IgnoreZeroAcc)
                    {
                        double a = 0.0;
                        double.TryParse(num, out a);
                        if (a != 0)
                        {
                            acc.Add(num);
                        }
                    }
                    else
                    {
                        acc.Add(num);
                    }
                    i = i + 8;
                    if (acc.Count == 8)
                    {
                        return acc;
                    }
                }
            }

            return acc;
        }

        private bool IsValidLine(string line)
        {
            bool valid;
            valid = SplitLine(line).Count == 8;
            return valid;
        }


    }
}
